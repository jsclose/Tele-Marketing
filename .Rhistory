arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
direction <- (arr[val %% 16])
direction <- unlist(direction, recursive = FALSE)
direction
}
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
citi$direction
degToCompass <- function(num) {
if(is.na(num)){
num <- 0
}
val <- (num/22.5)+.5
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
direction <- (arr[val %% 16])
direction
}
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
citi$direction
degToCompass <- function(num) {
if(is.na(num)){
num <- 0
}
val <- (num/22.5)+.5
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
direction <- arr[val %% 16]
direction
}
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
citi$direction
degToCompass
degToCompass(50)
degToCompass(33)
knitr::opts_chunk$set(echo = TRUE)
calculateTimeOfDay <- function(x) {
if(x < 6) {
TimeOfDay <- "NIGHT"
} else if(x < 12) {
TimeOfDay <- "MORNING"
} else if(x  < 18) {
TimeOfDay <- "AFTERNOON"
} else {
TimeOfDay <- "EVENING"
}
TimeOfDay
}
calculateTimeOfDay(10)
flights$TimeOfDay <-sapply(flights$hour, FUN=calculateTimeOfDay)
flights$TimeOfDay
citi$direction <- unnest(citi$direction)
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
citi$direction
citi$direction <- rapply(citi$bearing, FUN = degToCompass)
citi$direction <- as.data.frame(sapply(citi$bearing, FUN = degToCompass))
citi$direction <- as.data.frame(lapply(citi$bearing, FUN = degToCompass))
citi$direction <- as.data.frame(lapply(citi$direction, unlist))
citi$direction <- sapply(citi$direction, unlist))
citi$direction <- sapply(citi$bearing, FUN = degToCompass))
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
direction <- arr[val %% 16]
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
direction <- arr[val %% 16]
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
degToCompass <- function(num) {
if(is.na(num)){
num <- 0
}
val <- (num/22.5)+.5
#arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
#direction <- arr[val %% 16]
val
}
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
citi$direction
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
degToCompass <- function(num) {
if(is.na(num)){
num <- 0
}
val <- ((num/22.5)+.5 ) %%16
#
#direction <- arr[val %% 16]
val
}
arr <- c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
citi$direction <- sapply(citi$bearing, FUN = degToCompass)
citi$direction <- cut(citi$direction, 16, labels = arr )
citi$direction
riderDirection <- citi %>%
group_by(direction) %>%
summarise(directionCount = n() )
(riderDirection)
hist(riderDirection)
(riderDirection)
plot<-ggplot(data=riderDirection, aes(x=direction, y=directionCount))+
geom_bar()
plot
plot
plot<-ggplot(data=riderDirection, aes(x=direction, y=directionCount))+
geom_bar(stat="identity")
plot
library("ggplot2")
library("dplyr")
library("tidyr")
library("lubridate")
library("geosphere")
library("ggmap")
library("gridExtra")
citi <- read.csv("citibike_data_jan_to_sep.csv")
library("ggplot2")
library("dplyr")
library(lmtest)
# Import train.csv data
train <- read.csv("train.csv")
# Check the structure of the data using str() function
str(train)
# PClass: Passenger Class, Sibsp: Number of Siblings/Spouse aboard
# Parch: Number of Parents/Children aboard
# Are there variables that are not in the right class?
# If yes then convert those variables to the correct class
train$Survived <- as.factor(train$Survived)
train$Pclass <- as.factor(train$Pclass)
hist(train$SibSp)
summary(train$Age)
train$Age[is.na(train$Age)] = median(train$Age, na.rm = TRUE)
train$familySize <- train$SibSp + train$Parch + 1
ggplot(train, aes(x = familySize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size')
head(train$Ticket)
#looks like there is a letter and number assoicated with a ticket
train$ticketNumber = as.numeric(gsub('^.* ','',train$Ticket))
train$ticketPrefix = gsub('\\d*$','',train$Ticket)
head(train$ticketNumber)
head(train$ticketPrefix)
table(train$Embarked)
embarked <-train$Embarked
n <- length(embarked)
for(i in 1:n){
if(embarked[i] != "S" && embarked[i] != "C" && embarked[i] != "Q"){
embarked[i] = "S"
}
}
train$Embarked <-embarked
#remove empty level
train$Embarked <- droplevels(train$Embarked)
levels(train$Embarked)
tapply(train$Survived,train$Sex,mean)
names <- train$Name
titles <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
train$Titles <- titles
table(train$Titles)
#Simplifying into less categories
train$Titles <- gsub("Dona|Lady|Madame|the Countess", "Lady", train$Titles)
train$Titles <- gsub("Don|Jonkheer|Sir", "Sir", train$Titles)
#convert to factors
train$Titles <- as.factor(train$Titles)
# Build a logit model with Survival as the response variable
logit.model <- glm(Survived ~ (Age + Age^2) + Sex +  +Titles + Embarked + familySize , data = train, family = "binomial")
summary(logit.model)
probit.model <- glm(Survived ~ (Age + Age^2) + Sex +  Titles + Embarked + familySize , data = train, family = binomial(link="probit"))
#probit.model <- glm(Survived ~ (Age + Age^2) + Sex , data = train, family = binomial(link="probit"))
summary(probit.model)
anova(probit.model, test="Chisq")
#interaction.plot(train$Pclass, train$Sex, train$Survived)
# Decide what structure is appropriate, do you need interaction effects?
any(is.na(train$Age))
# Import the testing data in test.csv
test <- read.csv("test.csv")
# Check that you have all the predictor variables
# It will natually not have the response variable
str(test)
# Do any variable need recoding to match the training dataset
# If yes then do the necessary variable recoding
names <- test$Name
titles <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
test$Titles <- titles
#Simplifying into less categories
test$Titles <- gsub("Dona|Lady|Madame|the Countess", "Lady", test$Titles)
test$Titles <- gsub("Don|Jonkheer|Sir", "Sir", test$Titles)
#convert to factors
test$Titles <- as.factor(test$Titles)
test$familySize <- test$SibSp + test$Parch + 1
#test$Age[is.na(test$Age)] = median(test$Age, na.rm = TRUE)
# Predict the Survival Probability for the Testing Dataset using the model developed on
# the training dataset
#predict(logit.model, newdata = train, type = "response")
predictTest <- predict(probit.model, newdata = test,  type = "response")
# Convert probabilities to a a binary outcome (1 for Prob > 0.5, otherwise 0)
test$Survived = as.numeric(predictTest >= 0.5)
table(test$Survived)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(file = "titanticPrediction.csv", x = predictTest, row.names = FALSE)
any(is.na(train$Age))
any(is.na(train$Sex))
any(is.na(train$Titles))
any(is.na(train$Embarked))
any(is.na(train$familySize))
any(is.na(train$Sex))
any(is.na(train$Titles))
probit.model <- glm(Survived ~ (Age + Age^2) + Sex +  Titles + Embarked + familySize , data = train, family = binomial(link="probit"))
summary(probit.model)
predictTest <- predict(probit.model, newdata = test,  type = "response", na.action = na.pass,)
predictTest <- predict(probit.model, newdata = test,  type = "response", na.action = na.pass)
test$Survived = as.numeric(predictTest >= 0.5)
table(test$Survived)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(file = "titanticPrediction.csv", x = predictTest, row.names = FALSE)
predictTest <- predict(probit.model, newdata = test,  type = "response", na.action = na.omit)
test$Survived = as.numeric(predictTest >= 0.5)
pass
predictTest <- predict(probit.model, newdata = test,  type = "response", na.action = na.pass)
test$Survived = as.numeric(predictTest >= 0.5)
table(test$Survived)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(file = "titanticPrediction.csv", x = predictTest, row.names = FALSE)
any(is.na(train$Sex))
any(is.na(train$Age))
any(is.na(train$Embarked))
any(is.na(train$Titles))
any(is.na(train$familySize))
library("ggplot2")
library("dplyr")
library(lmtest)
# Import train.csv data
train <- read.csv("train.csv")
# Check the structure of the data using str() function
str(train)
# PClass: Passenger Class, Sibsp: Number of Siblings/Spouse aboard
# Parch: Number of Parents/Children aboard
# Are there variables that are not in the right class?
# If yes then convert those variables to the correct class
train$Survived <- as.factor(train$Survived)
train$Pclass <- as.factor(train$Pclass)
hist(train$SibSp)
summary(train$Age)
train$Age[is.na(train$Age)] = median(train$Age, na.rm = TRUE)
train$familySize <- train$SibSp + train$Parch + 1
ggplot(train, aes(x = familySize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size')
head(train$Ticket)
#looks like there is a letter and number assoicated with a ticket
train$ticketNumber = as.numeric(gsub('^.* ','',train$Ticket))
train$ticketPrefix = gsub('\\d*$','',train$Ticket)
head(train$ticketNumber)
head(train$ticketPrefix)
table(train$Embarked)
embarked <-train$Embarked
n <- length(embarked)
for(i in 1:n){
if(embarked[i] != "S" && embarked[i] != "C" && embarked[i] != "Q"){
embarked[i] = "S"
}
}
train$Embarked <-embarked
#remove empty level
train$Embarked <- droplevels(train$Embarked)
levels(train$Embarked)
tapply(train$Survived,train$Sex,mean)
names <- train$Name
titles <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
train$Titles <- titles
table(train$Titles)
#Simplifying into less categories
train$Titles <- gsub("Dona|Lady|Madame|the Countess", "Lady", train$Titles)
train$Titles <- gsub("Don|Jonkheer|Sir", "Sir", train$Titles)
#convert to factors
train$Titles <- as.factor(train$Titles)
# Build a logit model with Survival as the response variable
logit.model <- glm(Survived ~ (Age + Age^2) + Sex +  +Titles + Embarked + familySize , data = train, family = "binomial")
summary(logit.model)
probit.model <- glm(Survived ~ (Age + Age^2) + Sex +  Titles + Embarked  , data = train, family = binomial(link="probit"))
#probit.model <- glm(Survived ~ (Age + Age^2) + Sex , data = train, family = binomial(link="probit"))
summary(probit.model)
anova(probit.model, test="Chisq")
#interaction.plot(train$Pclass, train$Sex, train$Survived)
# Decide what structure is appropriate, do you need interaction effects?
any(is.na(train$familySize))
# Import the testing data in test.csv
test <- read.csv("test.csv")
# Check that you have all the predictor variables
# It will natually not have the response variable
str(test)
# Do any variable need recoding to match the training dataset
# If yes then do the necessary variable recoding
names <- test$Name
titles <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
test$Titles <- titles
#Simplifying into less categories
test$Titles <- gsub("Dona|Lady|Madame|the Countess", "Lady", test$Titles)
test$Titles <- gsub("Don|Jonkheer|Sir", "Sir", test$Titles)
#convert to factors
test$Titles <- as.factor(test$Titles)
test$familySize <- test$SibSp + test$Parch + 1
#test$Age[is.na(test$Age)] = median(test$Age, na.rm = TRUE)
# Predict the Survival Probability for the Testing Dataset using the model developed on
# the training dataset
#predict(logit.model, newdata = train, type = "response")
predictTest <- predict(probit.model, newdata = test,  type = "response", na.action = na.pass)
# Convert probabilities to a a binary outcome (1 for Prob > 0.5, otherwise 0)
test$Survived = as.numeric(predictTest >= 0.5)
table(test$Survived)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(file = "titanticPrediction.csv", x = predictTest, row.names = FALSE)
any(is.na(train))
which(is.na(train))
tele <- read.csv("telemarketing.csv")
tele <- read.csv("telemarketing.csv")
str(tele)
tele <- read.csv("telemarketing.csv", sep = ",")
tele <- read.csv("telemarketing.csv", sep = ",")
str(tele)
tele <- read.csv("telemarketing.csv", sep = ";")
str(tele)
colnames(tele)[colSums(is.na(tele)) > 0]
str(tele)
round(prop.table(table(tele$y)) * 100, 1)
names(which(colSums(is.na(tele))>0))
colSums(is.na(tele))
summary(tele)
round(prop.table(table(tele$y)) * 100, 1)
library(dummies)
install.packages("dummies")
library(dummies)
df1 <- cbind(tele, dummy(tele$contact, sep = "_"))
setwd("~/Desktop/TO 414/Assignments/5/Tele-Marketing")
tele$housing
tele <- read.csv("telemarketing.csv", sep = ";")
tele <- read.csv("telemarketing.csv", sep = ";")
tele$housing
tele$housing
levels(x) <- c("houseing_no","housing_unknown","housing_yes")
levels(tele) <- c("housing_no","housing_unknown","housing_yes")
tele <- read.csv("telemarketing.csv", sep = ";")
levels(tele$housing) <- c("housing_no","housing_unknown","housing_yes")
tele$housing
levels(tele$housing) <- c("housing_no","housing_unknown","housing_yes")
levels(tele$loan) <- c("loan_no","loan_unknown","loan_yes")
levels(tele$default) <- c("default_no","default_unknown","default_yes")
str(tele)
for (col in names(tele)){
if(class(tele[[col]]) == "factor"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
}
}
library(dummies)
library(class)
library(gmodels)
for (col in names(tele)){
if(class(tele[[col]]) == "factor"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
}
}
str(tele)
tele$job
tele_train <- tele[10297:41188, ]
tele_test <- tele[1:10297, ]
tele_train_labels <- tele[10297:41188, 20 ]
tele_test_pred <- knn(train = tele_train, test = tele_test,
cl = tele_train_labels, k=203)
for (col in names(tele)){
if(class(tele[[col]]) == "factor"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
tele <- tele[[-col]]
}
}
for (col in names(tele)){
if(class(tele[[col]]) == "factor"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
within(df, rm(col))
}
}
for (col in names(tele)){
if(class(tele[[col]]) == "factor"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
b <- c(b, col)
}
}
b <- c("duration")
for (col in names(tele)){
if(class(tele[[col]]) == "factor"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
b <- c(b, col)
}
}
tele <- subset(tele, select = -c( b ) )
b
b <- c("duration")
for (col in names(tele)){
if(class(tele[[col]]) == "factor" && col != "y"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
b <- c(b, col)
}
}
b
tele <- subset(tele, select = b )
tele
str(tele)
tele <- subset(tele, select = -b )
tel[, !(colnames(tele) %in% b)]
teel[, !(colnames(tele) %in% b)]
tele[, !(colnames(tele) %in% b)]
tele[, !(colnames(tele) %in% c(b)]
tele[, !(colnames(tele) %in% c(b))]
tele[ , !(names(tele) %in% b)]
tele
str(tele)
str(tele)
tele[ , !(names(tele) %in% b)]
str(tele)
tele <- read.csv("telemarketing.csv", sep = ";")
tele <- read.csv("telemarketing.csv", sep = ";")
str(tele)
round(prop.table(table(tele$y)) * 100, 1)
colSums(is.na(tele))
summary(tele)
boxplot(duration~y,data=tele, main="Duration of Calls vs. Success",
xlab="Successful Sale", ylab="Duration of Call (seconds)", outline=FALSE)
b <- c("duration")
for (col in names(tele)){
if(class(tele[[col]]) == "factor" && col != "y"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
b <- c(b, col)
}
}
b
tele <- tele[ , !(names(tele) %in% b)]
str(tele)
drops <- c("duration")
for (col in names(tele)){
if(class(tele[[col]]) == "factor" && col != "y"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
drops <- c(drops, col)
}
}
drops
tele <- tele[ , !(names(tele) %in% drops)]
str(tele)
tele$y <- as.numeric(tele$y)
levels(tele$housing) <- c("housing_no","housing_unknown","housing_yes")
levels(tele$loan) <- c("loan_no","loan_unknown","loan_yes")
tele <- read.csv("telemarketing.csv", sep = ";")
tele <- read.csv("telemarketing.csv", sep = ";")
str(tele)
library(dummies)
library(class)
library(gmodels)
round(prop.table(table(tele$y)) * 100, 1)
colSums(is.na(tele))
summary(tele)
boxplot(duration~y,data=tele, main="Duration of Calls vs. Success",
xlab="Successful Sale", ylab="Duration of Call (seconds)", outline=FALSE)
tele$y <- as.numeric(tele$y)
levels(tele$housing) <- c("housing_no","housing_unknown","housing_yes")
levels(tele$loan) <- c("loan_no","loan_unknown","loan_yes")
levels(tele$default) <- c("default_no","default_unknown","default_yes")
levels(tele$job)[match("unknown", levels(tele$job))] <- "job_unknown"
tele
levels(tele$job)
drops <- c("duration")
for (col in names(tele)){
if(class(tele[[col]]) == "factor" && col != "y"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
drops <- c(drops, col)
}
}
drops
tele <- tele[ , !(names(tele) %in% drops)]
str(tele)
tele_train <- tele[10297:41188, ]
tele_test <- tele[1:10297, ]
tele_train_labels <- tele[10297:41188, 20 ]
tele_test_labels <- tele[1:10297, 20 ]
tele_train
str(tele_train)
tele_train[20]
head(tele[20])
head(tele[[y]])
head(tele[[ "y" ]])
drops <- c("duration", "pdays")
for (col in names(tele)){
if(class(tele[[col]]) == "factor" && col != "y"){
tele <- cbind(tele, dummy(tele[[col]], sep = "_"))
drops <- c(drops, col)
}
}
drops
tele <- tele[ , !(names(tele) %in% drops)]
str(tele)
tele_n <- tele[ , !(names(tele) %in% c("y"))]
tele_n
str(tele_n)
tele_n <- as.data.frame(scale(tele_n))
str(tele_n)
tele_train <- tele_n[10297:41188, ]
tele_test <- tele_n[1:10297, ]
tele_train_labels <- tele[10297:41188, 20 ]
tele_test_labels <- tele[1:10297, 20 ]
tele_test_pred <- knn(train = tele_train, test = tele_test,
cl = tele_train_labels, k=203)
CrossTable(x = tele_test_labels, y = tele_test_pred,
prop.chisq=FALSE)
tele_test_pred <- knn(train = tele_train, test = tele_test,
cl = tele_train_labels, k=150)
CrossTable(x = tele_test_labels, y = tele_test_pred,
prop.chisq=FALSE)
203
CrossTable(x = tele_test_labels, y = tele_test_pred,
prop.chisq=FALSE)
